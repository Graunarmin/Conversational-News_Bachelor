 <unk> so i want to talk today about an idea <unk> it 's a big idea actually i think it 'll eventually be seen as probably the single biggest idea that 's emerged in the past century it. 's the idea of computation now of course that idea has brought us all of the computer technology we have today and so on <unk> but there 's actually a lot. <unk> more to computation than that it 's really a very deep very powerful very fundamental idea <unk> whose effects we 've only just begun to see <unk> . well <unk> i myself have spent the past thirty years of my life working on three large projects. that really try to take the idea of computation seriously so i started off. at a young age as a physicist using computers as tools then i started drilling down thinking about the. <unk> i might want to do trying to figure out what primitives they could be built up from and how they could be automated as much as possible . eventually i created a whole structure based on symbolic programming and so on that let me build mathematica <unk> . and for the past twenty three years at an increasing rate we 've been pouring more and more ideas and capabilities and so on into mathematica and i 'm happy to say that that 's led to many good things in r & d and education lots of other areas. <unk> areas <unk> . well <unk> i have to admit actually that i also had a very selfish reason for building mathematica . i wanted to use it myself a bit like galileo got to use his telescope four hundred years ago <unk> . but i wanted to look not at the astronomical universe <unk> but at the computational universe <unk> . so we normally think of programs as being complicated things that we build for very specific purposes <unk> . but what about the. <unk> space of all possible programs here 's a representation of a of a really simple program . so if we run this program this is what we get very simple <unk> . so let 's try changing the rule. for this program a little bit now we get another result still very simple try changing it. <unk> something a little bit more complicated but if we keep running this for a while we find out that although the pattern we get is very intricate it has a very regular structure . so the question is can anything else happen <unk> . well <unk> we can do a little experiment let 's just do a little mathematical experiment try and find out <unk> let 's just run all possible programs of the particular type. <unk> we 're looking at they 're called cellular automata <unk> . you can see a lot of diversity in the behavior here most of them do very simple things but if you if you look along all these different pictures at rule number thirty you start to see something interesting going on <unk>. <unk> so let 's take a closer look at rule number thirty here <unk> . <unk> my intuition and in fact to understand it i eventually had to create a whole new kind of science . this science is is different more general than the mathematics based science that we 've had for the for the past three hundred or so years you. know it 's always seemed like a big. <unk> manages to produce so much that seems to us so complex <unk> . well <unk> i think we 've found its secret <unk> . it 's just sampling what 's out there in the computational universe and quite often getting things like rule thirty or or like this . and knowing that starts to explain a lot of long standing mysteries. <unk> it also brings up new issues though like computational irreducibility <unk> i mean we 're used to having science let us predict things but something like this is. is fundamentally irreducible the only way to find its outcome is effectively just to watch it evolve it. 's connected to what i call the principle of computational equivalence <unk> which tells us that even incredibly simple systems can do computations. as sophisticated as anything it doesn 't take lots of technology. <unk> biological evolution to be able to do arbitrary computation just something that happens naturally all over the place . things with rules as simple as these can do it . well <unk> this has deep implications about the limits of science about predictability and controllability of things like biological processes or economies . about intelligence in the universe <unk> about questions like free will and about. <unk> creating technology <unk> . you know in working on this science for many years i kept wondering what will be its first killer app . well <unk> ever since i was a kid i 'd been thinking about systematizing knowledge and somehow making it computable . people like leibniz had wondered about that too three hundred years earlier <unk> but i 'd always assumed that to make progress i 'd essentially have to replicate a whole brain <unk> . well then i got to thinking this. <unk> scientific paradigm of mine suggests something different. and by the way i 've now got huge computation capabilities in mathematica <unk> and. i 'm a ceo with some worldly resources to do large <unk> seemingly crazy projects. so i decided to just try to see how much of the systematic knowledge that 's out there in the world we could make computable. <unk> it 's been a big very complex project which i was not sure was going to work at all <unk> but i 'm happy to say it 's actually going really well <unk> and. last year we were able to release the first website version of wolfram alpha . its purpose is to be a serious knowledge engine that computes answers to questions <unk> . so let 's give it a try <unk> let 's start off with something really easy . hope for the best very good okay <unk> so far so good. let 's try something a little bit harder <unk> . let 's do some some mathy thing and. with luck it 'll work out the answer and try and tell us some interesting things things about related math we could ask it something about. the real world let 's say i don 't know what 's the. <unk> gdp of spain <unk> . and it should be able to tell us that . now we could compute something related to this let 's say the gdp of spain divided by i don 't know the hmmm <unk> . let 's say the revenue of microsoft . the idea is that we can just type this in this kind of question in however we think of. <unk> let 's try asking a question <unk> like a health related question <unk> . so let 's say we have a a lab finding that you know we have an ldl level of one hundred and forty for a male aged fifty. <unk> so let 's type that in and now wolfram alpha will go and use. available public health data and try and figure out what part of the population that corresponds to and so on <unk> . or let 's try asking about i don 't know the international space station . and. what 's happening here is that wolfram. <unk> alpha is not just looking up something it 's computing. <unk> in real time where the international space station is right now at this moment how fast it 's going and so on <unk> . so wolfram alpha knows about lots and lots of kinds of things it 's. got by now pretty good coverage of everything you might find in a standard reference library. <unk> the goal is to go much further and very broadly to democratize. all of this knowledge and to try and be an authoritative source. in all areas to be able to compute answers to specific questions that people have not by searching what other people may have written down before <unk> but by using built in knowledge to compute fresh new answers to specific questions . <unk> of course wolfram alpha is a a monumentally huge long term project with lots and lots of challenges. <unk> for a start one has to curate a zillion different sources of of facts and data . and we built quite a pipeline of mathematica automation and human domain experts for doing this . but. that 's just the beginning <unk> given raw facts or data to actually answer questions one has to. <unk> one has to implement all those methods and models and algorithms and so on that science and other areas have built up over the centuries <unk> . well <unk> even starting from mathematica this is still a huge amount of work . so far there are about eight million lines of mathematica code in wolfram alpha built by experts from many many different fields <unk> . well <unk> a crucial idea of wolfram alpha is that you can just ask it questions using. <unk> which means that we 've got to be able to take all those strange utterances that people type into the input field and understand them <unk> . and i must say that i thought that that step might just be plain impossible. two big things happened . first a bunch of new ideas about linguistics that came from studying the computational universe and second the realization that having actual computable knowledge completely changes how one can set about. <unk> understanding language . and of course <unk> now with wolfram alpha actually out in the wild <unk> we can learn from its actual usage and in fact there 's been. an interesting coevolution that 's been going on between wolfram alpha and its human users. and it 's really encouraging right now if we look at web queries more than eighty percent of them get handled successfully the first time and if you look at things like the iphone app. <unk> fraction is considerably larger <unk> . so i 'm pretty pleased with it all but in many ways we 're. still at the very beginning with wolfram alpha <unk> i mean everything is scaling up very nicely and we 're getting getting more confident you can expect to see wolfram alpha technology showing up in more and more places . working both with this kind of public data like on the website . and with private knowledge for for people and companies and so on. <unk> i 've realized that wolfram alpha actually gives one a whole new kind of computing that one can call knowledge based computing in which one 's starting not just from raw computation but from a vast amount of built in knowledge. and when one does that one really changes the economics of delivering computational things whether it 's on the web or elsewhere <unk> . <unk> we have a fairly interesting situation right now on the one hand we have mathematica with its sort of precise formal language and a huge network of carefully designed capabilities. able to get a lot done in in just a few lines let me show you. a couple of examples here <unk> so here 's a a trivial piece of mathematica programming . here 's something where we 're sort of integrating a bunch of different capabilities here. <unk> line a little user interface that allows us to. do something fun there if. you go on that 's a slightly more complicated program that 's now doing all sorts of algorithmic things and and creating user interface and so on but it 's something that. is very precise stuff it 's a precise specification with a precise formal language that causes. mathematica to know what to do here <unk> <unk> then on the other hand we have. <unk> wolfram alpha with all the messiness of the world and human language and so on built into it . so what happens when you put these things together <unk> . i think it 's actually rather wonderful with wolfram alpha inside mathematica <unk> you can for example make precise programs that call on real world data here 's a. real simple example <unk> . you can also just sort of give vague input and then try. <unk> and have wolfram alpha figure out what you 're talking about let 's try this here . but actually i think the most exciting thing about this is that it really gives one the chance to. to democratize programming <unk> i mean anyone will be able to say what they want in plain language then the idea is that wolfram alpha will be able to figure out what precise pieces of code can do what they 're asking for and then show them examples that will let them. <unk> pick what they need to build up bigger and bigger precise programs <unk> . so <unk> sometimes wolfram alpha will be able to do the whole thing immediately and just give back a a whole big program that you can then compute with here 's a. big website where we 've been collecting lots of educational and other demonstrations about lots of kinds of things . i 'll show you one example here this is just an example of one of these. computable documents this is probably a fairly small piece of mathematica code. that that 's able to be run here <unk> okay <unk> let 's. zoom out again <unk> so given our new kind of science is there a general way to use it to make technology so with physical materials we 're used to. <unk> going around the world and discovering that particular materials are useful for particular technological purposes <unk> . well it turns out we can do very much the same kind of thing in the computational universe <unk> there 's an inexhaustible supply of programs out there the challenge is to see how to harness them for human purposes . something like rule thirty for example turns out to be a really good randomness generator other simple programs are good models for processes in the natural or social world . and for example wolfram alpha and mathematica are actually now. <unk> full of algorithms that we discovered by searching the computational universe and for example this if we go back here. this has become. surprisingly popular among composers finding musical forms by searching the computational universe <unk> in a sense we can use the computational universe to get. <unk> i 'm hoping we can for example <unk> use that even to get wolfram alpha to routinely do invention and discovery on the fly <unk> and to find all sorts of wonderful stuff that no engineer and no process of incremental evolution would ever come up with . well so that leads to kind of an ultimate question could it be that someplace out there in the computational universe we might find our physical. <unk> perhaps there 's even some quite simple rule some simple program for our universe <unk> . well <unk> the history of physics would have us believe that the rule for the universe must be pretty complicated <unk> . but in the computational universe we 've now seen how rules that are incredibly simple can produce incredibly rich and complex behavior <unk> . so could that be what 's going on with our whole universe <unk> . if the rules for the universe are simple. <unk> it 's kind of inevitable that that they have to be very abstract and very low level <unk> operating for example far below the level of space or time <unk> . which makes it hard to represent things <unk> but in at least a large class of cases one can think of the universe as being like some kind of network <unk> . which when it gets big enough behaves like continuous space in much the same way as. having lots of molecules can behave like a continuous fluid <unk> well <unk> then the universe has to evolve by applying little rules that progressively update this network. and each possible rule in a sense corresponds to a candidate universe <unk> actually i haven 't shown these before but. here are a few of the. candidate universes that. that i 've looked at some of these are hopeless universes completely sterile with other kinds of pathologies like no notion of space no notion. <unk> other problems like that but. the exciting thing that i 've found in the last few years is that you actually don 't have to go very far in the computational universe before you start finding candidate universes that aren 't obviously not our universe here. 's the problem <unk> any serious candidate for our universe is inevitably full of computational irreducibility <unk> which means. <unk> irreducibly difficult to find out how it will really behave and whether it matches our physical universe a. few years ago i was pretty excited to discover that there are candidate universes with incredibly simple rules that successfully reproduce special relativity and even general relativity and gravitation and at least give hints of quantum mechanics <unk> . so <unk> will we find the whole of physics i don 't know. <unk> but i think at this point it 's sort of almost embarrassing not to at least try . not an easy project one 's got to build a lot of technology one 's got to build a structure that 's probably at least as deep as existing physics <unk> . and i 'm not sure what the best way to organize the whole thing is build a team open it up offer prizes and so on but. i 'll tell you here today that i 'm committed to seeing this project done to see if within. <unk> we can finally hold in our hands the rule for our universe and know where our universe lies in the space of all possible universes . and be able to type into wolfram alpha the theory of the universe and have it tell us . so. i 've been working on the idea of computation now for more than thirty years building tools and methods and turning intellectual ideas into millions of lines of code and grist for server farms and so on <unk> . with every passing year. <unk> realize how much more powerful the idea of computation really is it 's taken us a long way already <unk> but there 's so much more to come from the foundations of science. <unk> to the limits of technology to the very definition of the human condition <unk> i think computation is destined to be the defining idea of our future <unk> . <unk> you able to say in a sentence or two how this type of thinking. could integrate at some point to things like string theory or the kind of things that people think of as the fundamental explanations of the universe <unk>. <unk> the parts of physics that we kind of know to be true things like the standard model of physics . what i 'm trying to do better reproduce the standard model of physics or it 's simply wrong the things that people have tried to do in the last twenty five years or so with string. <unk> theory and so on have been an interesting exploration that has tried to get back to the standard model but hasn 't quite gotten there . my guess is that some great simplifications of what i 'm doing may actually have. considerable resonance with what 's been done in string theory but that 's a complicated math thing that. <unk> in the audience he also has shown how complexity can arise out of a simple start does your work relate to his sw . i think so i view benoit mandelbrot 's work as as one of the. the founding contributions to to this kind of area <unk> benoit has been particularly interested in nested patterns in fractals and so on <unk> where. <unk> the structure is something that 's kind of tree like and where there 's sort of a big branch that makes little branches and even smaller branches and so on that 's. one of the ways that you get towards true complexity <unk> i think things like the rule thirty cellular automaton. get us to a different level <unk> in fact <unk> in a very precise way they get us to a different level because they seem to be things that are capable. <unk> complexity that 's sort of as great as complexity can ever get <unk> i could go on about this at great length.